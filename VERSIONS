Sort of a version update of changes I continue to make.

V.1.0.0:
|
 ---- contains 4 constitutive models: Neohookean,Fixed_Corotated(snow),water,Drucker_Prager(sand)
      contains collision detection only for the outline of the windows not between other particles.
      used nodes for the particles
      matrix math used [[]] for 2D-arrays.
      
      at the time used Godot v4.0.alpha13.official [59dcddc45]
      
V.2.0.0:
|
 ---- Added collision detection between particles.
      math corrections/changes.
      used various godot v4.0 betas
V.3.0.0:
|
 ---- Stopped using nodes for the particles and went to something else...
      math corrections/changes.
      rearranged the procedure of the simulation ( mainly the grip/particle resets )
      used various godot v4.0 betas
V.4.0.0:
|
 ---- Introduce a different way of collision detection between the particles.
      math corrections/changes.
      used various godot v4.0 betas
V.5.0.0:
|
 ---- matrix math used went to [] 1D arrays
      math corrections/changes.
      rearranged how the simulation was setup in the nodes.
      broke the process from 1 large function of the simulation into various smaller functions
      thought/started to moving into C# instead of GDScript (also have a python-in-godot version)
          C# went nowhere cause.
          python-in-godot version did work.
      used various godot v4.0 betas

V.5.5.0:(failed/incomplete)
|
 ---- tried to used the physics engine manually thru PhysicsServer2D for the particles
      
V.6.0.0:
|
 ---- Reestablished from the failed/incomplete try of PhysicsServer2D
      A lot of math corrections/changes probably need more.
      v4.0.beta10.official [d0398f62f]

V.6.0.2:
|
---- adjusted the particles mass property application.
     an option in handling boundary conditions of the particles (for/during collision detection)
     v4.0.beta11.official [91713ced8]

V.6.4.0:
|
---- change how weight interpolation interaction between particles, altered how the grid(has always confused me) operates.
     put in as an option; plain,original,normal: Material Point Method
     corrected how particles is created/arranged
     more math corrections.
     v4.0.rc2.official [d2699dc7a]

V.7.0.0:
|
---- altered how the particle is represented and displayed. (was a Rect2 and drawn as a Rect2, now is a Transform2d and drawn as a Image).
     v4.0.stable.official [92bee43ad]
     
V.7.0.2:
|
---- math corrections ( how "forces" is calculated ) 

V.7.0.3:
|
---- math corrections ( how the particle interact with the wall (window outline) ) 

V.7.1.0:
|
---- math corrections ( parts of weight interpolation was incorrect.)
     reassert the MLS verison of mpm. ( the original mpm is still there just commented out ; can go back and forth between original and MLS just comment or uncomment the portions).
     v4.0.stable.official [92bee43ad]
     
 V.7.2.0:
|
---- math corrections (weight interpolation),(math between particle/wall collisions), (constitutive models math), (the math of MPM and MLS MPM)
     v4.0.1.stable.official [cacf49999]

V.8.0.0:
|
---- proper "background eulerian" grid is implemented. I didn't quite understand the grid, up until now the weight-interpolation 
     was done/handled between each particle relation to every other particle. Now weight-interpolation is done between the grid and particle.
     math corrections ( weight interpolation),(math of MLS program)
     v4.0.1.stable.official [cacf49999]

V.8.3.0:
|
---- collision between the particles and walls(window outline) was reinserted.
     particles now also can rotate.
     v4.0.1.stable.official [cacf49999]

V.8.3.5:
|
---- adjustments to how the particles collided with the wall(window outline)
     v4.0.1.stable.official [cacf49999]

V.8.3.7:
|
---- the constitutive models was reinserted. All still need more testing, 
     but can't properly test: Fixed_Corotated(snow),water,Drucker_Prager(sand) - cause unable the particle count is far too low (next problem to solve)
     Neohookean - should work, but still require more testing.
     v4.0.1.stable.official [cacf49999]


V.8.4.0:
|
---- Increased the allowable number of different substances ( from 1 to whatever),
     (already had the ability for substances to be represented/show by any number of particles from 1 to whatever also when substances contain 1 particle, it can be any size; when the substances contain more particles they are not at any size, all of them will be the same.)
     v4.0.1.stable.official [cacf49999]

V.8.4.0:
|
---- moved to 4.1.0 beta from 4.0.1 stable;  
     v4.1.beta1.official [828ec2c5d]

V.8.5.0:
|
---- adjustments to how Particle Collision with the Wall (window outline)
     v4.1.beta1.official [828ec2c5d]

V.8.6.0:
|
--- slight corrections to the math of the mpm program
--- also updated how the grid is handled.
    v4.1.rc1.official [1f9e540f1]

V.8.8.0:
|
---- slight changes to the grid  (apparently solved the domain size 1 exploding)
     math correction to the math of the mpm program
     slight changes to how the particle/s interact with wall( window outline) :: 
     v4.1.stable.official [970459615]

V.8.8.1: 
|
---- slight changes to how the particle/s interact with wall( window outline) :: 
     v4.1.stable.official [970459615]


V.9.0.0:
|
---- decided to updated to a new version. I sorta hit wall with multiple things.
    ( my understanding of the particles and the grid.)
    (weight interpolation between grid and particles.)
    (how I created/arrange particles)
    (collision detection/handling between the particles and also wall.)
    (haven't properly tested any of the constitutive models yet)
    (also creating/adding more particles without destroying FrameRate)
    
    so I decided restart/refresh a new version.

V.10.0.0:
|
---- Change how I created/arranged particles :: 
        Before in Old Version: each particle was It own entity(2D-Node). they was arrange in a square ( for simplicity)
        
        In the New Version: I change how particle are created/shifted. Now it is 1 polygon(2D Polygon Node)
            and the particle are the points of the polygon.
      
      How I applied/practice the grid is is slightly altered::
         Before in Old Version: start of a particle round to the closest whole numbers then 
             collect the surrounding node. The particles would zoom/pop out of the window range the nano-second it started to run.
             when the grid spacing was at least '8759' it would prevent the instant pop and the particles would fall at a reasonable pace.
         
         In the New Version: the default for the grid comes from the window size. That the greatest common factor between
             the length and width to determine the grid spacing. 
             As of right now if there isn't a greates common factor of the window, the idea/plan is the grid space defaults to 1.
             until something better is thought of.
    
    slight change/altered to file names (generally do the same as before)
    old version is archived.
    As of now nothing else is back on.(Collision Detection for particles or wall,Constitutive Models, other thoughts)

    v4.2.stable.official [46dc27791] 

V.10.0.1:
|
---- Adjusted how to add/place/determine to amount of particles for a polygon (square) with vertex colors.
v4.2.stable.official [46dc27791]

V.10.1.0:
|
---- Altered how weight interpolation happen works.
     Collision is active/happens between the particle(polygon) Wall-(Window-Outline/Border)
v4.2.stable.official [46dc27791]

V.10.3.0:
|
---- For now a basic polygon(triangle) is used to display polygons, Now the polygon can be subdivided in to ways.
    1 :: the triangle is subdivided at the medians turning the points of the polygon for 3 to 6.
    2 :: the triangle is subdivided at the centroid, creating new polygons going from 1 to 6 polygons.
    Both should be able to subdivided further, as much as needed.. 
    Method 1 the vertex count should go 3-6-12-24-48-96-.....
    Method 2 the polygon count should go 1-6-36-216-696-4176-....
v4.2.stable.official [46dc27791]

v.10.3.5:
|
---- added friction against the wall.
     also able to adjust the color of each vertex of the polygon(s).
v4.2.stable.official [46dc27791]

v.10.4.0:
|
---- altered how collision is handled (betweeen the particle and wall) when the collision of restitution is
     inbetween 0 and 1. 
     (before was just only trigonometry),
     now the 'zero momentum frame' is used then trigonmetry.
v4.2.stable.official [46dc27791]
